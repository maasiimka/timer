{"mappings":"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","sources":["src/01-first.js"],"sourcesContent":["console.log(\"HELLO SCRIPT\");\n\n// 1\n// const employees = 9;\n// const max = 5000;\n// const min = 500;\n// let sum = 0;\n\n// for(let i = 0; i <= employees; i += 1 ){\n//     const sallary = Math.round(Math.random() * (max - min) + min);\n//     sum +=  sallary;\n//     console.log(sallary);\n// }\n// console.log(sum);\n\n// 2\n// let mini = 0;\n// const maxi = 12;\n// let sumOfNumbers = 0\n\n// for(mini; mini <= maxi; mini += 1){\n//     if(mini % 2 === 0){\n//         console.log(mini);\n//         sumOfNumbers += mini\n//     }else{\n//         continue;\n//     }\n// }\n// console.log(sumOfNumbers);\n\n// 3\n// let balance = 10000;\n// const payment = 2000;\n\n// console.log(`Загальна вартість ${payment}грн. Перевіряємо баланс`)\n\n// payment <= balance ?\n//  console.log(`На балансі ${balance - payment} грн`) :\n//  console.log('Мало грошей, іди нахрін');\n\n// if(payment <= balance){\n//     balance -= payment;\n//     console.log(`На балансі ${balance} грн`);\n// }else{\n//     console.log('Мало грошей, іди нахрін');\n// }\n// console.log('Операція завершена');\n\n// const totalSpent = 10000;\n// let payment = 500;\n// let discount = 0;\n// let discountText = 'Not a partner. Discount - 0% ';\n\n// if(totalSpent >= 100 && totalSpent < 1000){\n//     discount = .02;\n//     discountText = `Bronze partner. Discount - ${discount * 100}% `;\n// }else if(totalSpent >= 1000 && totalSpent < 5000){\n//     discount = .05;\n//     discountText = `Silver partner. Discount - ${discount * 100}% `;\n// }else if(totalSpent >= 5000){\n//     discount = .1;\n//     discountText = `Golden partner. Discount - ${discount * 100}% `;\n// }\n// console.log(discountText);\n// console.log(`The payment is ${payment - (payment * discount)}`);\n\n// const massive = ['Max', 'Anya', 'Chicken', 'Tank'];\n// console.table(massive);\n\n// const cart = [54 ,28, 105, 70, 92, 17, 120];\n\n// let sum = 0;\n// for(const item of cart){\n//     sum += item;\n// }\n// console.log(sum);\n\n// const numbers = [21, 43, 5438, 32, 53, 34, 65, 266, 374, 34, 4];\n// let sum = 0;\n\n// for(let i = 0; i < numbers.length; i += 1){\n//         if(numbers[i] % 2 === 0){\n//         sum += numbers[i];\n//     }\n// }\n\n// for(const number of numbers){\n//         if(number % 2 === 0){\n//         sum += number;\n//     }\n// }\n// console.log(sum);\n\n// const logins = ['Max', 'Anya', 'Chicken', 'Tank'];\n// const loginToFind = 'Tank';\n// // let message = `User ${loginToFind} not found`;\n\n// // for(let login of logins){\n\n//     if(login === loginToFind){\n//         message = `User ${loginToFind} found`;\n//         break;\n//     }\n// }\n\n// let message = '';\n// message = logins.includes(loginToFind)\n// ? `User ${loginToFind} found`\n// : `User ${loginToFind} not found`;\n\n// console.log(message);\n\n// const numbers = [21, 43, 52, 20, 32, 53, 34, 6, 5, 266, 374, 34];\n// let smallest = numbers[0];\n\n//  for(let number of numbers){\n//     if(number < smallest){\n//         smallest = number;\n//     }\n//  }\n//  console.log(smallest);\n\n// string.slice(а, b) вирізати кусочок від а до кінця, або від а до б;\n// array.join('---') з'єднати масив в строку\n// ( в дужках стоїть з'єднувальний елемент);\n// array1.concat(array2) приєднати до першого масиву другий;\n// array.indexOf('el') знайти індекс елемента;\n// array.splice(index, n) видаляє n елементів починаючи з index;\n// array.splice(index, 0, el1, el2,...) якщо вказати 0 на місці n додає\n// вказані елементи (el1, el2,...) по індексу;\n// array.splice(index, n, el1,...) заміна n елементів на вказані елементи;\n\n// const string = 'JavaScript';\n// const stringMassive = string.split('')\n\n// for(let i = 0; i < stringMassive.length; i += 1){\n//     if(stringMassive[i] !== stringMassive[i].toUpperCase()){\n//         stringMassive[i] = stringMassive[i].toUpperCase();\n//     }else{\n//         stringMassive[i] = stringMassive[i].toLowerCase();\n//     }\n// }\n\n// const transformedString = stringMassive.join('');\n\n// console.log(transformedString);\n\n// const filterNumbers = (arr, ...arr2) => {\n//     let inFirstAndSecond = [];\n\n//     for(let element of arr){\n//         if(arr2.includes(element)){\n//             inFirstAndSecond.push(element);\n//             console.log(element);\n//         }\n//     }\n\n//     return inFirstAndSecond;\n// }\n\n// console.log(filterNumbers([1, 4, 6, 7, 8, 35, 9], 7, 2, 4, 87, 35, 1));\n// console.log(filterNumbers([1, 2, 4, 5], 1, 2, 3, 4));\n\n// const cart = {\n//     items: [],\n\n//     getItems() {\n//         const {items} = this;\n//         return items;\n//     },\n\n//     add(product) {\n//         const {price} = product;\n//         const {items} = this;\n//         // let i = 0; i < items.length; i += 1\n//         for(const {name} of items){\n//             if(product.name === name){\n//                 this.increaseQuantity(name);\n//                 return;\n//             }\n//         }\n\n//         const obj = {\n//             ...product,\n//             cart: 1,\n//             priceForOne: price,\n//         }\n\n//         items.push(obj);\n\n//     },\n\n//     remove(item) {\n//         const {items} = this;\n\n//         const index = items.indexOf(item);\n//         items.splice(index, 1);\n//     },\n\n//     clear() {\n//         this.items = [];\n//     },\n\n//     countTotalPrice(totalPrice = 0) {\n//         const {items} = this;\n\n//         for(const {price} of items){\n//             totalPrice += price;\n//         }\n//         return totalPrice;\n//     },\n\n//     increaseQuantity(item) {\n//         const {items} = this;\n\n//         for(let i = 0; i < items.length ; i += 1 ){\n//             if(item === items[i].name){\n//                 items[i].cart += 1;\n//                 items[i].price = items[i].priceForOne * items[i].cart;\n//             }\n//         }\n//     },\n\n// // В ФУНКЦІЯХ increaseQuantity ТА decreaseQuantity НЕ МОЖНА ЗАСТОСУВАТИ\n// //  FOR OF І ДЕСТРУКТИЗУВАТИ ЗМІННІ , ТОМУ ЩО ЗМІННІ cart I price МАЮТЬ\n// //  ЗМІНИТИ СВОЄ ЗНАЧЕННЯ ЩО НЕМОЖЛИВО ЧЕРЕЗ for of\n\n//     decreaseQuantity(item) {\n//         const {items} = this;\n\n//         for(let i = 0; i < items.length; i += 1){\n//             if(item === items[i].name && items[i].cart > 1){\n//                 items[i].cart -= 1;\n//                 items[i].price = items[i].priceForOne * items[i].cart;\n//             }\n//         }\n//     },\n// }\n\n// cart.add({name: 'apple', price: 50});\n\n// cart.remove('apple');\n// console.log(cart.getItems());\n\n// cart.add({name: 'lemon', price: 30});\n// cart.add({name: 'lemon', price: 30});\n// cart.add({name: 'lemon', price: 30});\n// cart.add({name: 'lemon', price: 30});\n// cart.add({name: 'tomato', price: 70});\n// cart.add({name: 'avocado', price: 150});\n\n// cart.increaseQuantity('lemon');\n// cart.increaseQuantity('lemon');\n// cart.decreaseQuantity('lemon');\n// cart.decreaseQuantity('tomato');\n// cart.decreaseQuantity('tomato');\n// cart.increaseQuantity('avocado');\n// cart.increaseQuantity('lemon');\n\n// console.table(cart.getItems());\n// console.log(cart.countTotalPrice());\n\n// const Snake = function({specie, name, length} = {}){\n//     this.specie = specie;\n//     this.name = name;\n//     this.length = length;\n// }\n\n// Snake.prototype.changeLength = function(newLength){\n//     this.length = newLength;\n// }\n\n// const anaconda = new Snake({specie: 'anaconda', name: 'alice', length: 2.3});\n// console.log(anaconda);\n// anaconda.changeLength(2.5);\n// console.log(anaconda);\n\n// const python = new Snake({specie: 'python', name: 'ben', length: 3.15});\n// console.log(python);\n// python.changeLength(3.25);\n// console.log(python);\n\n// class Storage {\n//     constructor(items = []) {\n//         this.items = items;\n//     }\n\n//     getItems() {\n//         return this.items;\n//     }\n\n//     addItem(item) {\n//         this.items.push(item);\n//         return this.items\n//     }\n\n//     removeItem(item){\n//         const index = this.items.indexOf(item);\n//         this.items.splice(index, 1);\n//         return this.items;\n//     }\n// }\n\n// const mango = new Storage(['apple', 'lemon', 'banana', 'mayo']);\n// console.log(mango.getItems());\n// console.log(mango.addItem('tomato'));\n// console.log(mango.removeItem('mayo'));\n// console.log(mango);\n\n// class User {\n//     #login;\n//     #email;\n//     constructor({login, email} = {}) {\n//         this.#login = login;\n//         this.#email = email;\n//     }\n\n//     set login(login) {\n//         this.#login = login;\n//     }\n\n//     set email(email) {\n//         this.#email = email;\n//     }\n\n//     get login() {\n//         return this.#login;\n//     }\n\n//     get email() {\n//         return this.#email;\n//     }\n// }\n\n// const max = new User({\n//     login:'alala',\n//     email:'alala@ala.com',\n// });\n// console.log(max);\n// max.email = 'fsa@sass';\n// max.login = 'degfd';\n// console.log(max.email);\n// console.log(max.login);\n// console.log(max);\n\n// function solution(string) {\n//     const arr = string.split('');\n\n//     for(let i = 0; i <= arr.length - 1; i += 1){\n//       if(arr[i] === arr[i].toUpperCase()){\n//         arr.splice(i, 0, ' ');\n//         i += 1;\n//       }\n//     }\n\n//     return arr.join('');\n//   }\n\n// console.log(solution('superCamelCase'));\n\n// function tribonacci(signature,n){\n//     let arr = [];\n//     if(n === 1){\n//       arr = [1];\n//     }else if(n > 1){\n//       arr = [...signature];\n//       for(let i = 0; i <= n - 4; i += 1){\n//         const next = signature.reduce((acc, n) => acc + n, 0)\n//         signature.shift();\n//         signature.push(next);\n//         arr.push(next);\n//       }\n//     }\n//       return arr;\n//     }\n\n//   tribonacci([0, 1, 1], 1);\n\n// function duplicateCount(text){\n//     const arr = text.toLowerCase().split('');\n//     console . log(arr);\n//     const obj = arr.reduce((acc, el) =>\n//     ({...acc,[el]:  acc[el] ? acc[el] + 1 :  1, }), {});\n//     console.log(obj);\n//     const valuesArr = Object.values(obj);\n//     console.log(valuesArr);\n//     return valuesArr.filter(el => el > 1).length;\n\n//   }\n\n// //   const duplicateCount = (text) =>\n\n// //   Object.values\n// //   (text.toLowerCase()\n// //   .split('')\n// //   .reduce((acc, el) =>\n// //   ({...acc,[el]:  acc[el] ? acc[el] + 1 :  1, }), {}))\n// //   .filter(el => el > 1)\n// //   .length;\n\n//   console.log(duplicateCount('cdvtidjdjdjjrrfgjytttttjjjjsxsjjdJJ'));\n\n// let sum = 0;\n// for(let i = 0; i > -1; i += 1){\n//     let input = prompt(`Введіть число. Зараз сума дорівнює ${sum}`);\n//     if(input === null){\n//         break;\n//     }\n//     sum += Number(input);\n// }\n\n// alert(`Cума дорівнює ${sum}`)\n\n// const deliver = (country) => {\n//     switch (country.toLowerCase()){\n//         case 'china':\n//         console.log(`Доставка в China будет стоить 100 гривень`);\n//         break;\n//         case 'chili':\n//         console.log(`Доставка в Chili будет стоить 250 гривень`);\n//         break;\n//         case 'australia':\n//         console.log(`Доставка в Australia будет стоить 170 гривень`);\n//         break;\n//         case 'india':\n//         console.log(`Доставка в India будет стоить 80 гривень`);\n//         break;\n//         case 'jamaika':\n//         console.log(`Доставка в Jamaika будет стоить 120 гривень`);\n//         break;\n//         default: console.log('Доставки в цю країну немає');\n//     }\n// }\n\n// deliver('China');\n// deliver('Dakar');\n\n// const formatString = (str) =>\n//     str.length <= 40\n//     ? str\n//     : str.slice(0, 41) + '...';\n\n// console.log(formatString('sdfghjngbfvdcfghjmhngbfvddfgbhngfvhytgww'));\n\n// const checkForSpam = (arg) =>\n// arg.toLowerCase().includes('spam')\n// || arg.toLowerCase().includes('sale');\n\n// console.log(checkForSpam('span SpAm or cc'));\n// console.log(checkForSpam('span SALE or cc'));\n// console.log(checkForSpam('span or cc'));\n\n// let arr = [];\n// for(let i = 0; i > -1; i += 1){\n//     let input = prompt(`Введіть число. Зараз сума дорівнює ${arr}`);\n//     if(input === null){\n//         break;\n//     }\n//     arr.push(Number(input));\n// }\n\n// console.log(arr.reduce((acc, el) => acc + el, 0));\n// alert(`Cума дорівнює ${arr}`)\n\n// const allLogins = ['pomidor220', 'user', 'login', 'acdc', 'abcd']\n\n// const isLoginValid = (login) => login.length > 4 && login.length < 16;\n\n// const isLoginUnique = (allLogins, login) => !allLogins.includes(login);\n\n// const addLogin = (allLogins, login) => {\n\n//     if(!isLoginValid(login)){\n//         return `login \"${login}\" is not valid`;\n//     }else if(!isLoginUnique(allLogins, login)){\n//         return `login \"${login}\" is in register`;\n//     }\n\n//     allLogins.push(login);\n//     return allLogins;\n// }\n\n// console.log(addLogin(allLogins, 'login'));\n// console.log(addLogin(allLogins, 'log'));\n// console.log(addLogin(allLogins, 'logan'));\n// console.log(addLogin(allLogins, 'logfgeghfjhkgjuuyfydfs'));\n\n// const user = {\n//     name: 'Mango',\n//     age: 20,\n//     hobby: 'html',\n//     premium: true,\n//   };\n\n//   user.mood = 'happy';\n//   user.hobby = 'skydiving';\n//   user.premium =true;\n\n//   for(let el of Object.keys(user)){\n//     console.log(`${el} is ${user[el]}`);\n//   }\n//   console.log(user);\n\n// const user = {\n//     name: 'Mango',\n//     age: 20,\n//     hobby: 'html',\n//     premium: true,\n//     a : 'b',\n//   };\n\n// const countProps = (obj) => Object.keys(obj).length;\n// console.log(countProps(user));\n\n// const findBestEmployee = (employees) => {\n//     const listOfEmloyees = Object.keys(employees);\n//     let theMostProductive = listOfEmloyees[0];\n//     for(let el of listOfEmloyees){\n//         if(employees[el] > employees[theMostProductive]){\n//             theMostProductive = el;\n//         }\n//     }\n//     return theMostProductive;\n// }\n\n// console.log(\n//     findBestEmployee({\n//       ann: 29,\n//       david: 35,\n//       helen: 1,\n//       lorence: 99,\n//     }),\n//   ); // lorence\n\n//   console.log(\n//     findBestEmployee({\n//       poly: 12,\n//       mango: 17,\n//       ajax: 4,\n//     }),\n//   ); // mango\n\n//   console.log(\n//     findBestEmployee({\n//       lux: 147,\n//       david: 21,\n//       kiwi: 19,\n//       chelsy: 38,\n//     }),\n//   ); // lux\n\n// const countTotalSalary = (employees) =>\n//     Object.values(employees).\n//     reduce((total, salary) => total + salary, 0);\n\n// console.log(\n//     countTotalSalary({\n//       mango: 100,\n//       poly: 150,\n//       alfred: 80,\n//     }),\n//   ); // 330\n\n//   console.log(\n//     countTotalSalary({\n//       kiwi: 200,\n//       lux: 50,\n//       chelsy: 150,\n//     }),\n//   ); // 400\n\n// const products = [\n//     { name: 'Радар', price: 1300, quantity: 4 },\n//     { name: 'Сканер', price: 2700, quantity: 3 },\n//     { name: 'Дроид', price: 400, quantity: 7 },\n//     { name: 'Захват', price: 1200, quantity: 2 },\n//   ];\n\n// const getAllPropValues = (arr, prop) =>\n//     arr.map((el) => el[prop]).filter((el) => el !== undefined);\n\n// console.log(getAllPropValues(products, 'name')); // ['Радар', 'Сканер', 'Дроид', 'Захват']\n\n// console.log(getAllPropValues(products, 'quantity')); // [4, 3, 7, 2]\n\n// console.log(getAllPropValues(products, 'category')); // []\n\n// const products = [\n//     { name: 'Радар', price: 1300, quantity: 4 },\n//     { name: 'Сканер', price: 2700, quantity: 3 },\n//     { name: 'Дроид', price: 400, quantity: 7 },\n//     { name: 'Захват', price: 1200, quantity: 2 },\n// ];\n\n// const calculateTotalPrice = (allProdcuts, productName) => {\n//     const obj = allProdcuts.find((el) => el.name === productName);\n//     return obj.price * obj.quantity;\n// };\n\n// console.log(calculateTotalPrice(products, 'Радар')); // 5200\n\n// console.log(calculateTotalPrice(products, 'Дроид')); // 2800\n\n// const Transaction = {\n//     DEPOSIT: 'deposit',\n//     WITHDRAW: 'withdraw',\n//   };\n\n//   const account = {\n//     balance: 0,\n//     transactions: [],\n//     id : 0,\n\n//     createTransaction(successful ,amount, type) {\n//         this.id += 1;\n//         const transaction = {\n//             id : this.id,\n//             successful,\n//             amount,\n//             type,\n//         }\n//         return transaction\n//     },\n\n//     deposit(amount) {\n//         this.balance += amount;\n//         const operation = this.createTransaction(true, amount, 'deposit');\n//         this.transactions.push(operation);\n//         return operation;\n//     },\n\n//     withdraw(amount) {\n//         let successful;\n//         if(this.balance > amount){\n//             this.balance -= amount;\n//             successful = true;\n//         }else{\n//             successful = false;\n//         }\n//         const operation = this.createTransaction(successful, amount, 'withdraw');\n//         this.transactions.push(operation);\n//         return operation;\n//     },\n\n//     getBalance() {\n//         return this.balance;\n//     },\n\n//     getTransactionDetails(id) {\n//         return this.transactions.find((el) => id === el.id)\n//     },\n\n//     getTransactionTotal(type) {\n//         return this.transactions\n//         .filter((el) => type === el.type && el.successful === true)\n//         .reduce((total, el) => total + el.amount, 0)\n//     },\n//   };\n\n// console.log(account.createTransaction(true, 400, 'deposit'));\n// console.log(account.deposit(200));\n// console.log(account.deposit(1000));\n// console.log(account.deposit(500));\n// console.log(account.getBalance());\n// console.log(account.withdraw(275));\n// console.log(account.withdraw(355));\n// console.log(account.withdraw(6000));\n// console.log(account.getBalance());\n// console.log(account.getTransactionDetails(4));\n// console.log(account.getTransactionTotal('withdraw'));\n// console.log(account.getTransactionTotal('deposit'));\n\n// const inventory = {\n//     items: ['Knife', 'Gas mask'],\n//     add(itemName) {\n//       console.log(`Adding ${itemName} to inventory`);\n\n//       this.items.push(itemName);\n//     },\n//     remove(itemName) {\n//       console.log(`Removing ${itemName} from inventory`);\n\n//       this.items = this.items.filter(item => item !== itemName);\n//     },\n//   };\n\n//   const invokeInventoryAction = function(itemName, action) {\n//     console.log(`Invoking action on ${itemName}`);\n//     action(itemName);\n//   };\n\n//   invokeInventoryAction('Medkit', inventory.add.bind(inventory));\n//   // Invoking action on Medkit\n//   // Adding Medkit to inventory\n\n//   console.log(inventory.items); // ['Knife', 'Gas mask', 'Medkit']\n\n//   invokeInventoryAction('Gas mask', inventory.remove.bind(inventory));\n//   // Invoking action on Gas mask\n//   // Removing Gas mask from inventory\n\n//   console.log(inventory.items); // ['Knife', 'Medkit']\n\n// const Account = function({login, email} = {}){\n//     login;\n//     email;\n\n//     Account.prototype.getInfo = function(){\n//         console.log(`Login: ${login}, Email: ${email}`);\n//     };\n// }\n// console.log(Account.prototype.getInfo); // function\n\n// const mango = new Account({\n//   login: 'Mangozedog',\n//   email: 'mango@dog.woof',\n// });\n\n// mango.getInfo(); // Login: Mangozedog, Email: mango@dog.woof\n\n// const poly = new Account({\n//   login: 'Poly',\n//   email: 'poly@mail.com',\n// });\n\n// poly.getInfo(); // Login: Poly, Email: poly@mail.com\n\n// const User = function({name, age, followers} = {}){\n//     name;\n//     age;\n//     followers;\n\n//     User.prototype.getInfo = function(){\n//         console.log(`User ${name} is ${age} years old and has ${followers} followers`);\n//     }\n// }\n\n// const mango = new User({\n//     name: 'Mango',\n//     age: 2,\n//     followers: 20,\n//   });\n\n//   mango.getInfo(); // User Mango is 2 years old and has 20 followers\n\n//   const poly = new User({\n//     name: 'Poly',\n//     age: 3,\n//     followers: 17,\n//   });\n\n//   poly.getInfo(); // User Poly is 3 years old and has 17 followers\n\n// const Storage = function(arr){\n//     let{items} = this;\n//     items = arr;\n\n//     Storage.prototype.getItems = function(){\n//         return items;\n//     }\n\n//     Storage.prototype.addItem = function(item){\n//         items.push(item);\n//         return items;\n//     }\n\n//     Storage.prototype.removeItem = function(item){\n//         items.splice(items.indexOf(item), 1);\n//         return items;\n//     }\n// }\n\n// const storage = new Storage([\n//     'Нанитоиды',\n//     'Пролонгер',\n//     'Железные жупи',\n//     'Антигравитатор',\n//   ]);\n\n//   console.log(storage);\n\n//   const items = storage.getItems();\n//   console.table(items); // [ \"Нанитоиды\", \"Пролонгер\", \"Железные жупи\", \"Антигравитатор\" ]\n\n//   storage.addItem('Дроид');\n//   console.table(items); // [ \"Нанитоиды\", \"Пролонгер\", \"Железные жупи\", \"Антигравитатор\", \"Дроид\" ]\n\n//   storage.removeItem('Пролонгер');\n//   console.table(items); // [ \"Нанитоиды\", \"Железные жупи\", \"Антигравитатор\", \"Дроид\" ]\n\n// class StringBuilder{\n//     #value;\n//     constructor (str =''){\n//         this.#value = str;\n//     }\n\n//     get value(){\n//         return this.#value;\n//     }\n\n//     append(str){\n//         this.#value = this.#value + str;\n//     }\n\n//     prepend(str){\n//         this.#value = str + this.#value;\n//     }\n\n//     pad(str){\n//         this.#value = str + this.#value + str;\n//     }\n// }\n\n// const builder = new StringBuilder('.');\n\n// builder.append('^');\n// console.log(builder.value); // '.^'\n\n// builder.prepend('^');\n// console.log(builder.value); // '^.^'\n\n// builder.pad('=');\n// console.log(builder.value); // '=^.^='\n\n// class Car {\n//     /*\n//      * Добавь статический метод `getSpecs(car)`,\n//      * который принимает объект-машину как параметр и выводит\n//      * в консоль значения свойств maxSpeed, speed, isOn, distance и price.\n//      */\n//     static getSpecs({maxSpeed, speed, isOn, distance, price} = {}) {\n//         console.log(`maxSpeed:${maxSpeed} speed:${speed} isOn:${isOn} distance:${distance} price:${price}`);\n//     }\n\n//     /*\n//      * Конструктор получает объект настроек.\n//      *\n//      * Добавь свойства будущеего экземпляра класса:\n//      *  speed - текущая скорость, изначально 0\n//      *  price - цена автомобиля\n//      *  maxSpeed - максимальная скорость\n//      *  isOn - заведен ли автомобиль, значения true или false. Изначально false\n//      *  distance - общий киллометраж, изначально 0\n//      */\n//     constructor({maxSpeed, price} = {}) {\n//         this.maxSpeed = maxSpeed;\n//         this.speed = 0;\n//         this.isOn = false;\n//         this.distance = 0;\n//         this.price = price;\n//     }\n\n//     /*\n//      * Добавь геттер и сеттер для свойства price,\n//      * который будет работать с свойством цены автомобиля.\n//      */\n//     get price() {\n//          return Car.price;\n//      }\n\n//      set price(price) {\n//         Car.price = price;\n//      }\n\n//     /*\n//      * Добавь код для того чтобы завести автомобиль\n//      * Записывает в свойство isOn значение true\n//      */\n//     turnOn() {\n//         this.isOn = true;\n//     }\n\n//     /*\n//      * Добавь код для того чтобы заглушить автомобиль\n//      * Записывает в свойство isOn значение false,\n//      * и сбрасывает текущую скорость в 0\n//      */\n//     turnOff() {\n//         this.isOn = false;\n//     }\n\n//     /*\n//      * Добавялет к свойству speed полученное значение,\n//      * при условии что результирующая скорость\n//      * не больше чем значение свойства maxSpeed\n//      */\n//     accelerate(value) {\n//         if(this.speed + value <= this.maxSpeed){\n//             this.speed += value;\n//         }\n//     }\n\n//     /*\n//      * Отнимает от свойства speed полученное значение,\n//      * при условии что результирующая скорость не меньше нуля\n//      */\n//     decelerate(value) {\n//         if(this.speed - value >= 0){\n//             this.speed -= value;\n//         }\n//     }\n\n//     /*\n//      * Добавляет в поле distance киллометраж (hours * speed),\n//      * но только в том случае если машина заведена!\n//      */\n//     drive(hours) {\n//         if(this.isOn){\n//             this.distance += this.speed * hours;\n//         }\n//     }\n//   }\n\n//   const mustang = new Car({ maxSpeed: 200, price: 2000 });\n\n//   mustang.turnOn();\n//   mustang.accelerate(50);\n//   mustang.drive(2);\n\n//   Car.getSpecs(mustang);\n//   // maxSpeed: 200, speed: 50, isOn: true, distance: 100, price: 2000\n\n//   mustang.decelerate(20);\n//   mustang.drive(1);\n//   mustang.turnOff();\n\n//   Car.getSpecs(mustang);\n//   // maxSpeed: 200, speed: 0, isOn: false, distance: 130, price: 2000\n\n//   console.log(mustang.price); // 2000\n//   mustang.price = 4000;\n//   console.log(mustang.price); // 4000\n\n// const users = [ 'Moore Hensley', 'Sharlene Bush', 'Ross Vazquez', 'Elma Head'];\n\n// const getUserNames = users => users.map((a) => a);\n// console.log(getUserNames(users));\n\n// const users = [{name: 'Moore Hensley', eyeColor: 'blue',},\n// {name: 'Sharlene Bush', eyeColor: 'brown',},\n// {name: 'Ross Vazquez', eyeColor: 'green',},\n// {name: 'Elma Head', eyeColor: 'blue',}]\n\n// const getUsersWithEyeColor = (users, color) =>\n// users.filter((el) => el.eyeColor === color);\n\n//   console.log(getUsersWithEyeColor(users, 'blue'));\n\n// const users = [{name: 'Moore Hensley', gender: 'female',},\n// {name: 'Sharlene Bush', gender: 'male',},\n// {name: 'Ross Vazquez', gender: 'female',},\n// {name: 'Elma Head', gender: 'male',}]\n\n// const getUsersWithGender = (users, gender) =>\n// users.filter((el) => el.gender === gender);\n\n// console.log(getUsersWithGender(users, 'male'));\n// console.log(getUsersWithGender(users, 'female'));\n\n// const users = [{name: 'Moore Hensley', isActive: true,},\n// {name: 'Sharlene Bush', isActive: false,},\n// {name: 'Ross Vazquez', isActive: false,},\n// {name: 'Elma Head', isActive: false,}]\n\n// const getInactiveUsers = users =>\n// users.filter((el) => !el.isActive)\n\n// console.log(getInactiveUsers(users));\n\n// const users = [{name: 'Moore Hensley', email: 'dfergd@max.com',},\n// {name: 'Sharlene Bush', email: 'shereeanthony@kog.com',},\n// {name: 'Ross Vazquez', email: 'sfdg@gbfd.com',},\n// {name: 'Elma Head', email: 'elmahead@omatom.com',}]\n\n// const getUserWithEmail = (users, email) =>\n// users.find((el) => el.email === email).name;\n\n// console.log(getUserWithEmail(users, 'shereeanthony@kog.com'));\n// console.log(getUserWithEmail(users, 'elmahead@omatom.com'));\n\n// const users = [{name: 'Moore Hensley', age: 18,},\n// {name: 'Sharlene Bush', age: 30,},\n// {name: 'Ross Vazquez', age: 38,},\n// {name: 'Elma Head', age: 28,}]\n\n// const getUsersWithAge = (users, min, max) =>\n// users.filter((el) => el.age >= min && el.age <= max);\n\n// console.log(getUsersWithAge(users, 20, 30));\n// console.log(getUsersWithAge(users, 30, 40));\n\n// const users = [{name: 'Moore Hensley', balance: 18606,},\n// {name: 'Sharlene Bush', balance: 3000,},\n// {name: 'Ross Vazquez', balance: 3280,},\n// {name: 'Elma Head', balance: 2800,}]\n\n// const calculateTotalBalance = users =>\n// users.reduce((total, el) => total + el.balance, 0)\n\n// console.log(calculateTotalBalance(users));\n\n// const users = [{name: 'Moore Hensley', friend: 'Briana Decker',},\n// {name: 'Sharlene Bush', friend: 'Goldie Gentry',},\n// {name: 'Ross Vazquez', friend: 'Goldie Gentry',},\n// {name: 'Elma Head', friend: 'Briana Decker',}]\n\n// const getUsersWithFriend = (users, friendName) =>\n// users.filter((el) => el.friend === friendName)\n// .map((el) => el.name);\n\n// console.log(getUsersWithFriend(users, 'Briana Decker'));\n// console.log(getUsersWithFriend(users, 'Goldie Gentry'));\n\n// const users = [{name: 'Moore Hensley', friendCount: 1,},\n// {name: 'Sharlene Bush', friendCount: 5,},\n// {name: 'Ross Vazquez', friendCount: 3,},\n// {name: 'Elma Head', friendCount: 8,}]\n\n// const getNamesSortedByFriendsCount = users =>\n// users.sort((a, b) => b.friendCount - a.friendCount)\n// .map((el) => el.name);\n\n// console.log(getNamesSortedByFriendsCount(users));\n\n// const users = [{name: 'Moore Hensley', skills: 'swimming',},\n// {name: 'Sharlene Bush', skills: 'acrobating',},\n// {name: 'Ross Vazquez', skills: 'dancing',},\n// {name: 'Sharlene Bush', skills: 'swimming',},\n// {name: 'Ross Vazquez', skills: 'skiing',},\n// {name: 'Elma Head', skills: 'singing',}]\n\n// const getSortedUniqueSkills = users =>{\n// const arrOfSkills = users.reduce((acc, el) => {\n//     if(!acc.includes(el.skills)){\n//         acc = [...acc, el.skills];\n//     }\n//     return acc;\n// }, [])\n\n// return arrOfSkills.sort();\n// }\n\n//   console.log(getSortedUniqueSkills(users));\n\n// const button1 = document.querySelector('.button1');\n// button1.style.backgroundColor = 'teal';\n\n// const button2 = document.querySelector('.click-button2');\n// button2.textContent = 'dont CLIcK';\n\n// const button3 = document.querySelector('.click-button3');\n// button3.style.padding = '100px';\n\n// const element = document.querySelector('#button');\n// console.log(element.classList);\n\n// element.classList.remove('ok');\n// console.log(element.classList);\n\n// element.classList.add('no');\n// console.log(element.classList);\n\n// element.classList.replace('but', 'yes');\n// console.log(element.classList);\n\n// element.classList.toggle('click');\n// element.classList.toggle('yezz');\n// console.log(element.classList);\n\n// const button5 = document.querySelector('.click-button5');\n// console.log(button5.attributes);\n\n// console.log(button5.hasAttribute('class'));\n\n// console.log(button5.getAttribute('style'));\n\n// button5.setAttribute('class', 'shit');\n// console.log(button5.getAttribute('class'));\n\n// button5.removeAttribute('style');\n\n// const button51 = document.querySelector('.click-button5[data-button = number6]')\n// button51.style.backgroundColor = 'tomato';\n\n// const button7 = document.createElement('button');\n// button7.setAttribute('type', 'button')\n// button7.textContent = 'click';\n// button7.style.backgroundColor = 'blue';\n// button7.style.color = 'white';\n\n// const parent = document.querySelector('.parent-container');\n// parent.appendChild(button7);\n\n// button5.remove();\n\n// const parent2 = parent.cloneNode(true);\n// parent.after(parent2);\n\n// parent2.insertAdjacentHTML('afterbegin', '<button type = \"button\" style = \"margin: 20px; padding: 30px\">click</button>');\n\n// const c = (parent, element) => {\n//     if(element.style.backgroundColor === 'red'){\n//         element.style.backgroundColor = 'white';\n//     }else{\n//         element.style.backgroundColor = 'red';\n//     }\n// }\n// button1.addEventListener('click', c.bind(button1, parent2, button3));\n\n// const form = document.querySelector('.form');\n// const loginInput = document.querySelector('input[type = \"text\"]');\n// const passwordInput = document.querySelector('input[type = \"password\"]');\n\n// const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     const login = loginInput.value.trim();\n//     const password = passwordInput.value.trim();\n\n//     if(login === '' || password === ''){\n//         return alert('login or password is not valid');\n//     }\n\n//     form.reset();\n\n//     alert(`\n//         Thanks for registration\n//         login : ${login}\n//         password: ${password}\n//         `);\n// }\n\n// form.addEventListener('submit', handleSubmit);\n\n// const list = document.querySelectorAll('#categories > li');\n// console.log(list.length);\n\n// const itemHeader = document.querySelectorAll('.item > h2');\n\n// itemHeader.forEach(element => {\n//     console.log(`Category: ${element.textContent}`);\n//     let itemsOfItem = element.nextElementSibling.children;\n//     console.log(`Amount: ${itemsOfItem.length}`);\n// });\n\n// const ingredients = [\n//     'Картошка',\n//     'Грибы',\n//     'Чеснок',\n//     'Помидоры',\n//     'Зелень',\n//     'Приправы',\n//   ];\n\n// const listOfIngridients = document.querySelector('#ingredients')\n// const listToCreate = [];\n\n// ingredients.forEach(element => {\n//     let item = document.createElement('li');\n//     item.textContent = element;\n\n//     listToCreate.push(item);\n// });\n\n// listOfIngridients.append(...listToCreate);\n\n// const images = [\n//     {\n//         url: 'https://images.pexels.com/photos/213399/pexels-photo-213399.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n//         alt: 'Orange and White Koi Fish Near Yellow Koi Fish',\n//     },\n//     {\n//       url: 'https://images.pexels.com/photos/140134/pexels-photo-140134.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n//       alt: 'White and Black Long Fur Cat',\n//     },\n//     {\n//       url: 'https://images.pexels.com/photos/219943/pexels-photo-219943.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\n//       alt: 'Group of Horses Running',\n//     },\n//   ];\n\n// const resultingSting = images.map(element =>\n//     `<li class=\"item\"><img src=\"${element.url}\" alt=\"${element.alt}\"></li>`\n// ).join('');\n\n// const body = document.querySelector('body');\n// body.insertAdjacentHTML('afterbegin', `<ul class=\"list\">${resultingSting}</ul>`);\n\n// const decrement = document.querySelector('.decrement');\n// const increment = document.querySelector('.increment');\n// const value = document.querySelector('#value');\n\n// const counterValue = (val ,arg) => {\n//     return val + arg;\n// }\n\n// const decrease = () => {\n//     const val = Number(value.textContent);\n//     const arg = -1;\n//     value.textContent = counterValue(val, arg);\n// }\n\n// const increase = () => {\n//     const val = Number(value.textContent);\n//     const arg = 1;\n//     value.textContent = counterValue(val, arg);\n// }\n\n// decrement.addEventListener('click', decrease);\n// increment.addEventListener('click', increase);\n\n// const input = document.querySelector('#name-input');\n// const output = document.querySelector('#name-output');\n\n// const outputValue = () => {\n\n//     const value = input.value;\n//     console.log(value);\n//     if(value) {\n//         output.textContent = value;\n//         return;\n//     }\n//     output.textContent = 'незнакомец'\n// }\n\n// input.addEventListener('input', outputValue);\n\n// const input = document.querySelector('#validation-input');\n// const amount = Number(input.dataset.length);\n\n// const isEqual = () => {\n//     if(amount === input.value.length){\n//         input.classList.add('valid');\n//         input.classList.remove('invalid');\n//         return;\n//     }\n//     input.classList.remove('valid');\n//     input.classList.add('invalid');\n// }\n\n// input.addEventListener('blur', isEqual);\n\n// const controller = document.querySelector('#font-size-control');\n// const text = document.querySelector('#text');\n\n// const controlSize = () => {\n//     text.style.fontSize = `${Number(controller.value)}px`;\n// }\n\n// controller.addEventListener('input', controlSize);\n\n// const controller = document.querySelector('#controls');\n// const boxes = document.querySelector('#boxes');\n// const number = document.querySelector('#controls>input');\n// const render = document.querySelector('.render')\n// const destroy = document.querySelector('.destroy')\n// let sizes = 30;\n// let arrOfElements = []\n\n// function randColor() {\n//     let r = Math.round(Math.random() * (256)),\n//         g = Math.round(Math.random() * (256)),\n//         b = Math.round(Math.random() * (256));\n//     return `rgb(${r.toString()}, ${g.toString()}, ${b.toString()})`;\n// }\n\n// const createBoxes = () => {\n//     const amount = Number(number.value);;\n//     for(let i = 0; i < amount; i += 1){\n//         const rectangle = document.createElement('div');\n//         rectangle.style.backgroundColor = randColor();\n//         rectangle.style.width = `${sizes}px`;\n//         rectangle.style.height = `${sizes}px`;\n//         rectangle.style.border = `4px solid ${randColor()}`;\n//         sizes += 10;\n//         arrOfElements.push(rectangle);\n//     }\n\n//     number.value = ''\n//     boxes.append(...arrOfElements);\n//     sizes = 30;\n//     arrOfElements = [];\n// }\n\n// const destroyBoxes = () => {\n//     boxes.innerHTML = '';\n\n// }\n\n// render.addEventListener('click', createBoxes);\n// destroy.addEventListener('click', destroyBoxes)\n\n// const courses = [\n// {id: 234, price: 500, theme:['js'],},\n// {id: 235, price: 800, theme:['html'],},\n// {id: 236, price: 1000, theme:['js', 'html'],},\n// {id: 237, price: 570, theme:['css'],},\n// {id: 238, price: 900, theme:['js', 'node'],},\n// {id: 239, price: 3000, theme:['html', 'node', 'css'],},\n// {id: 240, price: 800, theme:['css', 'js'],},\n// {id: 241, price: 300, theme:['node'],},\n// {id: 242, price: 1100, theme:['js', 'css'],},\n// {id: 243, price: 1500, theme:['js', 'react'],},\n// {id: 244, price: 400, theme:['react'],},\n// ]\n\n// const parent = document.querySelector('.js-nav');\n// const container = document.querySelector('.container');\n\n// function randColor() {\n//     let r = Math.round(Math.random() * (256)),\n//         g = Math.round(Math.random() * (256)),\n//         b = Math.round(Math.random() * (256));\n//     return `rgb(${r.toString()}, ${g.toString()}, ${b.toString()})`;\n// }\n\n// const createFilter = () => {\n//     const elements = [... new Set(courses.flatMap(el => {return el.theme}))]\n//     const markup = elements.map(el => `<li><a type=\"button\" class=\"btn\" >${el}</a></li>`).join('')\n\n//     parent.insertAdjacentHTML('afterbegin', markup);\n// }\n\n// const createFullList = () => {\n//     const marcupOfActive = courses.map(el =>\n//     `<li class=\"contain\" style=\"background-color: ${randColor()};\">Course №${el.id} Price: ${el.price} Specification: ${el.theme}</li>`).join('');\n\n//     container.insertAdjacentHTML('afterbegin', marcupOfActive);\n// }\n\n// const findActive = event => {\n//     event.preventDefault()\n\n//     const target = event.target;\n//     if(target.nodeName !== 'A'){\n//         return;\n//     }\n\n//     changeColoredButton(target);\n\n// }\n\n// const changeColoredButton = target => {\n//     const currentActive = parent.querySelector('.inverted');\n\n//     if(currentActive){\n//         currentActive.classList.remove('inverted');\n\n//     }\n//     if(currentActive === target){\n//         target.classList.remove('inverted');\n//         container.innerHTML = '';\n//         createFullList();\n//         return;\n//     }\n\n//     target.classList.add('inverted');\n//     createListOfActive(target);\n// }\n\n// const createListOfActive = (target) => {\n\n//     container.innerHTML = '';\n//     const category = target.textContent;\n//     const listOfActive = courses.filter(el => el.theme.includes(category));\n\n//     const marcupOfActive = listOfActive.map(el =>\n//     `<li class=\"contain\" style=\"background-color: ${randColor()};\">Course №${el.id} Price: ${el.price} Specification: ${el.theme}</li>`).join('');\n\n//     container.insertAdjacentHTML('afterbegin', marcupOfActive);\n// }\n\n// createFilter();\n// createFullList();\n// parent.addEventListener('click', findActive);\n\n// const container = document.querySelector('.container');\n// const container2 = document.querySelector('.container2');\n// let counter = 0;\n// let counter2 = 0;\n\n// const onMouseMove = () => {\n//     counter += 1;\n//     container.textContent = `amount of calls: ${counter}`;\n// }\n\n// window.addEventListener('mousemove', onMouseMove);\n\n// const onMouseMove2 = () => {\n//     counter2 += 1;\n//     container2.textContent = `amount of calls 2: ${counter2}`;\n// }\n\n// const throttledEvent = _.throttle(onMouseMove2, 500);\n\n// window.addEventListener('mousemove', throttledEvent);\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve(5);\n//   }, 4000);\n// });\n\n// promise\n//   .then((value) => {\n//     console.log(value); // 5\n//     return value * 2;\n//   })\n//   .then((value) => {\n//     console.log(value); // 10\n//     return value * ten;\n//   })\n//   .then((value) => {\n//     console.log(value); // 30\n//   })\n//   .catch((error) => {\n//     console.log(error);\n//   });\n\n// const colors = [\n//   \"#F44336\",\n//   \"#FFEBEE\",\n//   \"#FFCDD2\",\n//   \"#EF9A9A\",\n//   \"#E57373\",\n//   \"#EF5350\",\n//   \"#F44336\",\n//   \"#E53935\",\n//   \"#D32F2F\",\n//   \"#ECEFF1\",\n//   \"#CFD8DC\",\n//   \"#B0BEC5\",\n//   \"#90A4AE\",\n//   \"#78909C\",\n//   \"#607D8B\",\n//   \"#546E7A\",\n//   \"#455A64\",\n//   \"#37474F\",\n//   \"#263238\",\n//   \"#000000\",\n//   \"#FFFFFF\",\n// ];\n\n// const min = 0;\n// const max = colors.length;\n// let isWorking = false;\n// let intervalId = null;\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const start = document.querySelector(\".js-start\");\n// const stop = document.querySelector(\".js-stop\");\n// const body = document.querySelector(\"body\");\n\n// const changeBGColor = () => {\n//   if (isWorking) {\n//     return;\n//   }\n//   intervalId = setInterval(() => {\n//     isWorking = true;\n//     body.style.backgroundColor = colors[randomIntegerFromInterval(min, max)];\n//   }, 500);\n// };\n\n// const stopChangingColor = () => {\n//   clearInterval(intervalId);\n//   isWorking = false;\n// };\n\n// start.addEventListener(\"click\", changeBGColor);\n// stop.addEventListener(\"click\", stopChangingColor);\n\nimport \"./style.css\";\n\nconst start = document.querySelector(\".js-start\");\nconst stop = document.querySelector(\".js-stop\");\nconst input = document.querySelectorAll(\".js-date\");\nconst timer = document.querySelector(\".js-timer\");\nconst validDate = document.querySelector(\".valid-date\");\nconst resultOfValidation = document.querySelector(\".result\");\n\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\",\n};\n\nlet isWorking = false;\n\nsetInterval(() => {\n  let date = new Date();\n  validDate.textContent = date.toLocaleString(\"Uk-uk\", options);\n}, 2000);\n\nconst pad = (value) => {\n  return String(value).padStart(2, \"0\");\n};\n\nclass CountdownTimer {\n  constructor(currentTime = {}) {\n    this.time = currentTime;\n  }\n\n  getUnixTime() {\n    this.unixTime = this.time.getTime();\n  }\n\n  calculateSubstractTime() {\n    this.currentTime = null;\n    this.intervalId = setInterval(() => {\n      this.currentTime = Date.now();\n\n      this.calculateCurrentTime();\n    }, 1000);\n  }\n\n  calculateCurrentTime() {\n    this.getUnixTime();\n    this.resultTime = this.unixTime - this.currentTime;\n    const { resultTime } = this;\n\n    if (this.resultTime < -1000) {\n      resultOfValidation.textContent =\n        \"!!! Час не валідний, cпробуйте ввести інший !!!\";\n      resultOfValidation.style.backgroundColor = \"#ff0000\";\n      stopTimer();\n      return;\n    } else if (this.resultTime < 0 && this.resultTime > -1000) {\n      resultOfValidation.textContent =\n        \"Таймер закінчив роботу. Надсилаємо нагадування ;)\";\n      resultOfValidation.style.backgroundColor = \"#008000\";\n      stopTimer();\n      return;\n    }\n\n    this.resultDays = Math.floor(resultTime / (1000 * 60 * 60 * 24));\n    this.resultHours = pad(\n      Math.floor((resultTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    this.resulMins = pad(\n      Math.floor((resultTime % (1000 * 60 * 60)) / (1000 * 60))\n    );\n    this.resultSecs = pad(Math.floor((resultTime % (1000 * 60)) / 1000));\n\n    const { resultDays, resultHours, resulMins, resultSecs } = this;\n\n    timer.textContent = `${resultDays}:${resultHours}:${resulMins}:${resultSecs}`;\n\n    console.log(resultDays, resultHours, resulMins, resultSecs);\n  }\n}\n\nlet timer2 = null;\n\nconst createTimer = () => {\n  if (isWorking) {\n    return;\n  }\n  isWorking = true;\n  const arrOfInputs = [...input];\n  const arrOfValues = arrOfInputs.map((el) => Number(el.value.trim()));\n  const futureTime = new Date(2022, 1, ...arrOfValues);\n  const timer1 = new CountdownTimer(futureTime);\n  timer1.calculateSubstractTime();\n  timer2 = timer1;\n};\n\nconst stopTimer = () => {\n  isWorking = false;\n  clearInterval(timer2.intervalId);\n};\n\nstart.addEventListener(\"click\", createTimer);\nstop.addEventListener(\"click\", stopTimer);\n"],"names":[],"version":3,"file":"index.js.map"}